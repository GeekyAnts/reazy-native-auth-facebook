{"version":3,"sources":["../../src/lib/transform.js"],"names":["recast","require","traverse","inflect","parse","exports","code","convert","ast","insert","target","nodes","index","splice","apply","concat","createImport","varname","modulename","program","body","findFirstNodeAfter","type","next","result","pre","node","print","addToArrayInObject","objectCode","key","objectAst","ran","Error","parent","name","elements","length","addLastInFunction","search","addImport","camelize","underscore","expression","raw","indexOf"],"mappings":"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","file":"transform.js","sourcesContent":["var recast = require('recast');\nvar traverse = require('ast-traverse');\nvar inflect = require('i')();\n\nvar parse = exports.parse = function (code) {\n  return recast.parse(code);\n};\n\nvar convert = exports.convert = function (ast) {\n  if (typeof ast === 'string') {\n    return recast.parse(ast);\n  }\n\n  return ast;\n};\n\nvar insert = exports.insert = function (target, nodes, index) {\n  // console.log('target', target);\n  target.splice.apply(target, [index || 0, 0].concat(nodes));\n\n  return target;\n};\n\nvar createImport = exports.createImport = function (varname, modulename) {\n  return parse('import ' + varname + ' from \\'' + modulename + '\\';\\n').program.body;\n};\n\nvar findFirstNodeAfter = exports.findFirstNodeAfter = function (ast, code, type) {\n  var next = false;\n  var result = null;\n\n  traverse(ast, {\n    pre: function (node) {\n      // console.log('node', node);\n      if (node && node.type !== 'Line' && node.type !== 'Block' && recast.print(node).code === code) {\n        next = true;\n      }\n\n      if (!result && next && (!type || node.type === type)) {\n        next = false;\n        result = node;\n      }\n    }\n  });\n\n  return result;\n};\n\nexports.print = function (ast) {\n  return recast.print(ast).code;\n};\n\nexports.addToArrayInObject = function (ast, objectCode, key, code) {\n  ast = convert(ast);\n\n  var objectAst = findFirstNodeAfter(ast, objectCode, 'ObjectExpression');\n  var ran = false;\n\n  if (objectAst === null) {\n    throw new Error('Could not find any object ' + objectCode);\n  }\n\n  traverse(objectAst, {\n    pre: function (node, parent) {\n      if (node.type === 'ArrayExpression' && parent.key.name === key) {\n        insert(node.elements, parse(code).program.body, node.elements.length);\n        ran = true;\n      }\n    }\n  });\n\n  if (!ran) {\n    throw new Error('Could not find an array for object key ' + key + ' to insert ' + code);\n  }\n\n  return ast;\n};\n\nexports.addLastInFunction = function (ast, search, code) {\n  var node = findFirstNodeAfter(ast, search, 'FunctionExpression');\n\n  if (node === null) {\n    throw new Error('No function expression found after ' + search);\n  }\n\n  var nodes = node.body.body;\n\n  insert(nodes, parse(code).program.body, nodes.length);\n\n  return ast;\n};\n\nexports.addImport = function (ast, varname, modulename) {\n  varname = inflect.camelize(inflect.underscore(varname), false);\n\n  ast = convert(ast);\n\n  var index = 0;\n  var nodes = ast.program.body;\n\n  if (nodes[0].expression && nodes[0].expression.raw.indexOf('use strict') !== -1) {\n    index = 1;\n  }\n\n  insert(nodes, createImport(varname, modulename), index);\n\n  return ast;\n};\n"]}