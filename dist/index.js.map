{"version":3,"sources":["../src/index.js"],"names":["param","serviceName","app","callGraphApi","resolve","reject","requestFields","_responseInfoCallback","error","result","console","log","message","auth","setUser","user","accessToken","getToken","infoRequestParams","fields","string","infoRequestConfig","httpMethod","version","parameters","toString","infoRequest","addRequest","start","login","readPermissions","Promise","logInWithReadPermissions","then","isCancelled","getCurrentAccessToken","data","setToken","catch","logout","logOut","loginFacebook","logoutFacebook","authFacebookService","Fbsdk","set"],"mappings":";;;;;;kBAEe,UAASA,KAAT,EAAgB;AAC7B,SAAO,UAASC,WAAT,EAAsB;AAC3B,QAAMC,MAAM,IAAZ;;AAEA,QAAMC,eAAe,SAAfA,YAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,aAAlB,EAAoC;AACvD,UAAMC,wBAAwB,SAAxBA,qBAAwB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/C,YAAID,KAAJ,EAAW;AACTE,kBAAQC,GAAR,CAAYH,MAAMI,OAAlB;AACAP,iBAAOG,KAAP;AACD,SAHD,MAGO;AACLR,gBAAMa,IAAN,CAAWC,OAAX,CAAmBL,MAAnB;AACAL,kBAAQ;AACNW,kBAAMN,MADA;AAENO,yBAAahB,MAAMa,IAAN,CAAWI,QAAX;AAFP,WAAR;AAID;AACF,OAXD;AAYA,UAAMC,oBAAoB;AACxBC,gBAAQ;AACNC,kBAAQd;AADF;AADgB,OAA1B;AAKA,UAAMe,oBAAoB;AACxBC,oBAAY,KADY;AAExBC,iBAAS,MAFe;AAGxBC,oBAAYN,iBAHY;AAIxBF,qBAAahB,MAAMa,IAAN,CAAWI,QAAX,GAAsBQ,QAAtB;AAJW,OAA1B;AAMA,UAAMC,cAAc;AAClB;AACA,WAFkB,EAGlBL,iBAHkB,EAIlBd,qBAJkB,CAApB;AAMA;AACA,kDAA0BoB,UAA1B,CAAqCD,WAArC,EAAkDE,KAAlD;AACD,KAhCD;;AAkCA,QAAMC,QAAQ,SAARA,KAAQ,CAACC,eAAD,EAAkBxB,aAAlB,EAAoC;AAChD,aAAO,IAAIyB,OAAJ,CAAY,UAAS3B,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,uCAAa2B,wBAAb,CAAsCF,eAAtC,EACCG,IADD,CACM,UAACxB,MAAD,EAAY;AAChBC,kBAAQC,GAAR,CAAYF,MAAZ;AACA,cAAIA,OAAOyB,WAAX,EAAwB;AACtB;AACD,WAFD,MAEO;AACL;;AAEA,0CAAYC,qBAAZ,GACCF,IADD,CACM,UAACG,IAAD,EAAU;AACd,kBAAIA,KAAKpB,WAAT,EAAsB;AACpBhB,sBAAMa,IAAN,CAAWwB,QAAX,CAAoBD,KAAKpB,WAAzB;AACAb,6BAAaC,OAAb,EAAsBC,MAAtB,EAA8BC,aAA9B;AACD,eAHD,MAGO;AACLI,wBAAQC,GAAR,CAAY,sBAAZ;AACD;AACF,aARD,EASC2B,KATD,CASO,UAAC9B,KAAD,EAAW;AAChBE,sBAAQC,GAAR,CAAYH,KAAZ,EAAmB,6CAAnB;AACD,aAXD;AAYD;AACF,SArBD;AAsBD,OAvBM,CAAP;AAwBD,KAzBD;;AA2BA,QAAM+B,SAAS,SAATA,MAAS,GAAM;AACnB,qCAAaC,MAAb;AACAxC,YAAMa,IAAN,CAAWC,OAAX,CAAmB,IAAnB;AACAd,YAAMa,IAAN,CAAWwB,QAAX,CAAoB,IAApB;AACD,KAJD;;AAMArC,UAAMa,IAAN,CAAW4B,aAAX,GAA2BZ,KAA3B;AACA7B,UAAMa,IAAN,CAAW6B,cAAX,GAA4BH,MAA5B;;AAEA,QAAMI,sBAAsB;AAC1Bd,kBAD0B;AAE1BU,oBAF0B;AAG1BK;AAH0B,KAA5B;;AAMA1C,QAAI2C,GAAJ,CAAQ5C,WAAR,EAAqB0C,mBAArB;;AAEA,WAAOA,mBAAP;AACD,GAlFD;AAmFD,C;;AAtFD","file":"index.js","sourcesContent":["import Fbsdk, { AccessToken, LoginManager, GraphRequest, GraphRequestManager } from 'react-native-fbsdk';\n\nexport default function(param) {\n  return function(serviceName) {\n    const app = this;\n\n    const callGraphApi = (resolve, reject, requestFields) => {\n      const _responseInfoCallback = (error, result) => {\n        if (error) {\n          console.log(error.message);\n          reject(error);\n        } else {\n          param.auth.setUser(result);\n          resolve({\n            user: result,\n            accessToken: param.auth.getToken()\n          });\n        }\n      }\n      const infoRequestParams = {\n        fields: {\n          string: requestFields\n        }\n      }\n      const infoRequestConfig = {\n        httpMethod: 'GET',\n        version: 'v2.8',\n        parameters: infoRequestParams,\n        accessToken: param.auth.getToken().toString()\n      }\n      const infoRequest = new GraphRequest(\n        // '/me/photos?type=uploaded&fields=link',\n        '/me',\n        infoRequestConfig,\n        _responseInfoCallback\n      );\n      // Start the graph request.\n      new GraphRequestManager().addRequest(infoRequest).start();\n    };\n\n    const login = (readPermissions, requestFields) => {\n      return new Promise(function(resolve, reject) {\n        LoginManager.logInWithReadPermissions(readPermissions)\n        .then((result) => {\n          console.log(result);\n          if (result.isCancelled) {\n            // console.log('Login cancelled');\n          } else {\n            // console.log('Login success with permissions: ', result);\n\n            AccessToken.getCurrentAccessToken()\n            .then((data) => {\n              if (data.accessToken) {\n                param.auth.setToken(data.accessToken);\n                callGraphApi(resolve, reject, requestFields);\n              } else {\n                console.log('access token is null');\n              }\n            })\n            .catch((error) => {\n              console.log(error, ' :error in Fetching response from Graph API');\n            });\n          }\n        });\n      });\n    }\n\n    const logout = () => {\n      LoginManager.logOut();\n      param.auth.setUser(null);\n      param.auth.setToken(null);\n    };\n\n    param.auth.loginFacebook = login;\n    param.auth.logoutFacebook = logout;\n\n    const authFacebookService = {\n      login,\n      logout,\n      Fbsdk,\n    };\n\n    app.set(serviceName, authFacebookService);\n\n    return authFacebookService;\n  }\n}\n"]}